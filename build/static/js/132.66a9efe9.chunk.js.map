{"version":3,"file":"static/js/132.66a9efe9.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.jsx","components/errorBoundary/ErrorBoundary.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/charSearchForm/CharSearchForm.jsx","components/pages/MainPage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx"],"sourcesContent":["\nimport img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img src={img} alt=\"Error\" style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}/>\n    )\n}\n\nexport default ErrorMessage;","import { Component }  from 'react';\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState, useEffect } from 'react';\nimport Spin from '../spinner/Spin';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spin/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const imgStyle = (thumbnail.includes('image_not_available')) ? {objectFit: \"fill\"} : null;\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nimport Spin from '../spinner/Spin';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\n\nconst  CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1038);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} =  useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) :  setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n           \n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setChars(chars => [...chars, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    const renderItems = (chars) => {\n       \n        const elements = chars.map((item, i) => {\n\n            const imgStyle = (item.thumbnail.includes('image_not_available')) ? {objectFit: \"fill\"} : null;\n \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null} >\n                    {elements}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const list = renderItems(chars);\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spin/> : null;\n    \n    return (\n        \n        <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {list}\n            <button  \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{display: charEnded ? 'none' : 'block'}}\n                onClick={()=> onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected:  PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spin from '../spinner/Spin';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n    \n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const charId = props.charId\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n          \n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spin/> : null;\n    const content = (errorMessage || spinner || skeleton || <View char={char}/>);\n\n    return (\n        <div className=\"char__info\">\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    const imgStyle = (thumbnail.includes('image_not_available')) ? {objectFit: \"fill\"} : null;\n   \n    return (\n        <> \n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length ? null : 'There is no comics with this character'}\n                {   comics.map((item, i) => {\n                        if (i > 9) {\n                            // eslint-disable-next-line\n                            return;\n                        }\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n       </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The heroes was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}, {resetForm}) => {\n                    updateChar(charName);\n                    resetForm()\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { useState } from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport decoration from '../../resources/img/vision.png';\nimport CharSearchForm from '../charSearchForm/CharSearchForm'\n\nconst MainPage = () => {\n\n    const [selectedChar, setSelectedChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setSelectedChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        \n        </>\n    )\n}\n\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; \n    const _apiKey = 'apikey=3f31870fbcc8fc0765d61a0131cfee59';\n    const _baseOffset = 210;\n\n    //2440c7a859b3bff0de7ce61825d29c6d\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?orderBy=name%2Cmodified&limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n\n        return  res.data.results.map(_transformComics);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n            if (!res.data.results[0].description) {\n                res.data.results[0].description = \"Sorry, no description found for this character\"\n            }\n            else if (res.data.results[0].description.length > 200) {\n                res.data.results[0].description = res.data.results[0].description.slice(0, 200) + '...'\n            }\n            \n        return _transformCharacter(res.data.results[0]);\n    }\n    \n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n            \n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description, \n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n\n        }\n    }\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n\n        }\n    }\n\n \n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\n\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}"],"names":["src","img","alt","style","display","width","height","objectFit","margin","ErrorBoundary","state","error","errorInfo","console","log","this","setState","ErrorMessage","props","children","Component","View","char","name","description","thumbnail","homepage","wiki","imgStyle","includes","className","href","useState","setChar","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spin","content","onClick","mjolnir","chars","setChars","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","list","elements","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","skeleton","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","resetForm","htmlFor","type","placeholder","selectedChar","setSelectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","slice","getComic","path","extension","urls","items","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}